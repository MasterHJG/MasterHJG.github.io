<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title>数据结构——栈与队列</title>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2019/03/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
      <content type="text">参考代码

栈

基本定义

栈是一种特殊的线性表，插入和删除操作只能在一端进行操作。插入操作称为入栈（push），删除元素称为出栈（pop）。栈中没有元素称为空栈。栈的操作只能在一端进行，则最先入栈的元素将最后删除，因此栈也称为先进后出的线性表。

栈的基本操作


  push(e)，入栈操作
  pop()，出栈操作
  peek()，获取栈顶元素
  isEmpty()，栈是否为空


示例代码如下

数组实现



1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74```
public class StackWithArray {
    private int[] array;  //数组实现
    private int top = -1;  //初始化，栈空
    private int capacity; //栈的大小

    public StackWithArray(int capacity) {
        this.capacity = capacity;
        this.array = new int[capacity];
    }

    /**
     * 入栈
     *
     * @param value
     * @throws Exception
     */
    public void push(int value) throws Exception {
        if (top == capacity - 1) {
            throw new Exception(&quot;栈已满&quot;);
        }
        top++;
        array[top] = value;
    }

    /**
     * 出栈
     *
     * @return
     * @throws Exception
     */
    public int pop() throws Exception {
        if (top == -1) {
            throw new Exception(&quot;栈为空&quot;);
        }
        int value = array[top];
        top--;
        return value;
    }

    /**
     * 判断栈是否为空
     *
     * @return
     */
    public boolean isEmpty() {
        return top == -1;
    }

    /**
     * 获取栈顶元素
     *
     * @return
     * @throws Exception
     */
    public int peek() throws Exception {
        if (top == -1) {
            throw new Exception(&quot;栈为空&quot;);
        }
        return array[top];
    }

    public static void main(String[] args) throws Exception {
        StackWithArray stack = new StackWithArray(5);
        stack.push(1);
        stack.push(2);
        stack.push(3);
        System.out.println(stack.peek());
        System.out.println(stack.pop());
        System.out.println(stack.peek());
        System.out.println(stack.isEmpty());
    }
}
```


链表实现



1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66```
public class StackWithLinkedList {
    public class Node {
        int data;  //关键字
        Node next; //尾指针，指向后继元素

        public Node(int data) {
            this.data = data;
        }
    }

    public Node top = null;
    public int size = 0;

    /**
     * 在头部插入
     *
     * @param data
     */
    public void push(int data) {
        Node node = new Node(data);
        node.next = top;
        top = node;
        size += 1;
    }

    public int pop() throws Exception {
        if (top == null) {
            throw new Exception(&quot;栈为空&quot;);
        }
        size -= 1;
        int data = top.data;
        top = top.next;
        return data;
    }

    /**
     * 获取栈的大小
     *
     * @return
     */
    public int getSize() {
        return size;
    }

    public boolean isEmpty() {
        return top == null;
    }

    public int peek() throws Exception {
        if (top == null) {
            throw new Exception(&quot;栈为空&quot;);
        }
        return top.data;
    }

    public static void main(String[] args) throws Exception {
        StackWithLinkedList stack = new StackWithLinkedList();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        System.out.println(stack.peek());
        System.out.println(stack.isEmpty());
    }
}
```


常见用法

一个数组实现两个栈

将数组的起始位置看作是第一个栈的栈底，将数组的尾部看作第二个栈的栈底，压栈时，栈顶指针分别向中间移动，直到两栈顶指针相遇，则栈满。



1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101```
public class TwoStacksFormAnArray {
    private int[] array;
    private int top1, top2;  //两个栈的栈顶
    private int capacity;

    public TwoStacksFormAnArray(int capacity) {
        this.capacity = capacity;
        this.array = new int[capacity];
        this.top1 = -1;  //栈1为空
        this.top2 = capacity;
    }

    public boolean stackEmpty1() {
        if (top1 == -1)
            return true;
        else
            return false;
    }

    public boolean stackEmpty2() {
        if (top2 == capacity)
            return true;
        else
            return false;
    }

    public int pop1() throws Exception {
        if (stackEmpty1())
            throw new Exception(&quot;栈1为空!&quot;);
        else {
            int value = array[top1];
            top1 -= 1;
            return value;
        }
    }

    public int pop2() throws Exception {
        if (stackEmpty2())
            throw new Exception(&quot;栈2为空!&quot;);
        else {
            int value = array[top2];
            top2 += 1;
            return value;  //索引变化
        }
    }

    public void push1(int x) throws Exception {
        if (top1 == top2 - 1)
            throw new Exception(&quot;发生上溢！&quot;);
        else {
            top1 += 1;
            array[top1] = x;
        }
    }

    public void push2(int x) throws Exception {
        if (top1 == top2 - 1)
            throw new Exception(&quot;发生上溢!&quot;);
        else {
            top2 -= 1;
            array[top2] = x;
        }
    }

    public int peek1() throws Exception {
        if (stackEmpty1())
            throw new Exception(&quot;栈1为空!&quot;);
        else {
            return array[top1];
        }
    }

    public int peek2() throws Exception {
        if (stackEmpty2())
            throw new Exception(&quot;栈2为空!&quot;);
        else {
            return array[top2];
        }
    }

    public static void main(String[] args) {
        TwoStacksFormAnArray t = new TwoStacksFormAnArray(5);
        try {
            t.push1(1);
            t.push1(2);
            t.push2(3);
            t.push2(4);
            t.push2(5);
            System.out.println(t.peek1());
            System.out.println(t.peek2());
            //t.push1(6);
            System.out.println(t.pop1());
            System.out.println(t.pop1());
            System.out.println(t.stackEmpty1());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```


两个栈实现一个队列

两种思路：


  
    始终维护s1作为存储空间，以s2作为临时缓冲区。入队时，将元素压入s1。出队时，将s1的元素逐个“倒入”（弹出并压入）s2，将s2的顶元素弹出作为出队元素，之后再将s2剩下的元素逐个“倒回”s1。
  
  
    入队时，将元素压入s1。出队时，判断s2是否为空，如不为空，则直接弹出顶元素；如为空，则将s1的元素逐个“倒入”s2，把最后一个元素弹出并出队。
  




1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53```
public class TwoStacksFormAQueue {

    /**
     * 入队时，将元素压入s1。
     * 出队时，判断s2是否为空，如不为空，则直接弹出顶元素；
     * 如为空，则将s1的元素逐个“倒入”s2，把最后一个元素弹出并出队。
     */

    private Stack&amp;lt;Integer&amp;gt; s1;  //用来入栈，相当于队列的队尾
    private Stack&amp;lt;Integer&amp;gt; s2;  //用来出栈，相当于队列的队头

    public TwoStacksFormAQueue() {
        s1 = new Stack&amp;lt;&amp;gt;();
        s2 = new Stack&amp;lt;&amp;gt;();
    }

    public void addToTail(int x) throws Exception {
        s1.push(x);
    }

    public int deleteFromHead() throws Exception {
        if (s2.isEmpty() == true) {
            System.out.println(&quot;栈s2为空&quot;);
            stack1ToStack2();
        }
        return s2.pop();
    }

    public void stack1ToStack2() throws Exception {
        while (s1.isEmpty() == false) {
            s2.push(s1.pop());
        }
    }

    public static void main(String[] args) {
        TwoStacksFormAQueue queue = new TwoStacksFormAQueue();
        try {
            //queue.deleteFromHead(); //empty stack
            queue.addToTail(1);
            queue.addToTail(2);
            queue.addToTail(3);
            System.out.println(queue.deleteFromHead());
            System.out.println(queue.deleteFromHead());
            queue.addToTail(4);
            queue.addToTail(5);
            System.out.println(queue.deleteFromHead());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```


队列

基本定义

队列是一种特殊的线性表，插入和删除操作在表的两端进行操作。插入操作称为入队（enqueue），删除操作称为出队（dequeue）。出队的一端称为队头，入队的一端称为队尾，因此队列的特点是先进先出。



队列的基本操作


  offer(e)，入队操作
  poll()，出队操作
  isEmpty()，判断空队列


示例代码如下

循环队列

由于数组构成的队列容易造成空间的浪费，所以优化成循环队列。



注意点：

为方便起见，初始化-&amp;gt;head=tail=0

当队空：head=tail

当队满：head=tail（也成立）

但是这样就无法判断

处理：


  另外设置一个标志位以区别队列是空还是满
  少用一个元素空间，约定“队列头指针head在队尾指针tail的下一个位置上”，作为满状态


空：head=tail

满：(tail+1)%maxsize=head

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76```
public class CircularQueue {
    private int head = 0, tail = 0;  //设置队列的头指针和尾指针
    private int maxSize;  //队列的空间大小
    private int[] array;  //数组结构

    public CircularQueue(int maxSize) {
        this.array = new int[maxSize];
        this.maxSize = maxSize;
    }

    public boolean queueEmpty() {
        if (head == tail)
            return true;
        else

            return false;
    }

    public boolean queueFull() {
        if ((tail + 1) % maxSize == head)
            return true;
        else
            return false;
    }

    public void enqueue(int x) throws Exception {
        if (queueFull())
            throw new Exception(&quot;队列已满！&quot;);
        else {
            array[tail] = x;
            if (tail == maxSize - 1)
                tail = 0;
            else
                tail += 1;
        }
    }

    public int dequeue() throws Exception {
        if (queueEmpty())
            throw new Exception(&quot;队列为空！&quot;);
        else {
            int value = array[head];
            if (head == maxSize - 1)
                head = 0;
            else
                head += 1;
            return value;
        }
    }

    public static void main(String[] args) {
        CircularQueue queue = new CircularQueue(5);
        try {
            queue.enqueue(1);
            queue.enqueue(2);
            queue.enqueue(3);
            queue.enqueue(4);
            //queue.enqueue(5); //队列满
            System.out.println(queue.dequeue());
            System.out.println(queue.dequeue());
            queue.enqueue(5);
            queue.enqueue(6);
            //queue.enqueue(7);
            System.out.println(queue.dequeue());
            System.out.println(queue.dequeue());
            System.out.println(queue.dequeue());
            System.out.println(queue.dequeue());
            //System.out.println(queue.dequeue()); //队列空
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```


常见用法

两个队列实现一个栈

思路：

所有元素进入q1，因为我们的目的是栈，也就是最先出d,队列是从队头开始出，所有先把abc出q1并入q2,此时目标d跑到了队头，出q1。此时q1已经为空，下一个要出的是c,把ab从q2出队并进q1,此时目标c在q2队头,出队……..

即：把非空队列的n-1个压人空对列，剩的第n个出队…总有一个队列为空。



1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39```
public class TwoQueuesFormAStack {
    private Queue&amp;lt;Integer&amp;gt; q1;
    private Queue&amp;lt;Integer&amp;gt; q2;

    public TwoQueuesFormAStack() {
        q1 = new LinkedList&amp;lt;&amp;gt;();
        q2 = new LinkedList&amp;lt;&amp;gt;();
    }

    public void push(int x) {
        q1.offer(x);
    }

    public int pop() {
        int value = 0;
        if (q1.isEmpty()) {
            while (q2.size() &amp;gt; 1) {
                q1.offer(q2.poll());
            }
            value = q2.poll();
        } else if (q2.isEmpty()) {
            while (q1.size() &amp;gt; 1) {
                q2.offer(q1.poll());
            }
            value = q1.poll();
        }
        return value;
    }

    public static void main(String[] args) {
        TwoQueuesFormAStack stack = new TwoQueuesFormAStack();
        stack.push(1);
        stack.push(2);
        System.out.println(stack.pop());
        System.out.println(stack.pop());
    }
}
```


</content>
      <categories>
        
          <category> 数据结构 </category>
        
      </categories>
      <tags>
        
          <tag> 栈 </tag>
        
          <tag> 队列 </tag>
        
          <tag> JAVA </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title>数据结构——链表</title>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2019/03/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/</url>
      <content type="text">参考代码
单向链表

单向链表由各个内存通过 next 指针连接在一起组成。

文字解析：


  data数据+next指针，组成一个链表元素的内存结构
  第一个元素称为表头head，最后一个元素称为表尾tail
  表尾的next指针设置为null
  单链表的遍历方向单一


单链表图示：



插入操作：



删除操作：



反转操作：



示例代码如下：

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150```
/**
 * 单向链表
 */
public class SinglyLinkedList {
    private Node nil = new Node(0); //辅助头节点nil
    private Node head; //头节点
    private int size = 0; //链表长度

    static class Node {
        int data;
        Node next;

        public Node(int data) {
            this.data = data;
        }
    }

    /**
     * 初始化单链表
     * 头插法
     * 顺序相反
     *
     * @param nums
     * @return
     */
    public boolean initWithHead(int[] nums) {
        if (nums == null || nums.length == 0)
            return false;
        for (int i = 0; i &amp;lt; nums.length; i++) {
            Node node = new Node(nums[i]);
            size++;
            node.next = nil.next;
            nil.next = node;
        }
        head = nil.next;
        return true;
    }

    /**
     * 初始化单链表
     * 尾差法
     *
     * @param nums
     * @return
     */
    public boolean initWithTail(int[] nums) {
        if (nums == null || nums.length == 0)
            return false;
        Node temp = nil;
        for (int i = 0; i &amp;lt; nums.length; i++) {
            Node node = new Node(nums[i]);
            size++;
            temp.next = node;
            temp = node;
        }
        head = nil.next;
        return true;
    }

    /**
     * 在指定位置插入元素
     *
     * @param data
     * @param index 从0开始计算
     * @return
     */
    public boolean insert(int data, int index) {
        if (index &amp;lt; 0 || index &amp;gt; size)
            return false;
        Node temp = nil;
        while (index-- &amp;gt; 0) {
            temp = temp.next;
        }
        Node node = new Node(data);
        node.next = temp.next;
        temp.next = node;
        size++;
        head = nil.next;
        return true;
    }

    /**
     * 删除指定位置的节点
     *
     * @param index 从0开始计算
     * @return
     */
    public boolean delete(int index) {
        if (index &amp;lt; 0 || index &amp;gt;= size)
            return false;
        Node temp = nil;
        while (index-- &amp;gt; 0) {
            temp = temp.next;
        }
        temp.next = temp.next.next;
        size--;
        head = nil.next;
        return true;
    }

    /**
     * 反转单链表
     * 若链表nil-&amp;gt;1-&amp;gt;2-&amp;gt;null
     * 1. prev=null,cur=1:null&amp;lt;-1
     * 2. prev=1,cur=2:null&amp;lt;-1&amp;lt;-2
     * null&amp;lt;-1&amp;lt;-2&amp;lt;-nil
     */
    public void reverse() {
        Node cur = head;
        Node prev = null;
        while (cur != null) {
            Node next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }
        nil.next = prev;
        head = nil.next;
    }

    /**
     * 从头到尾遍历单链表
     */
    public void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + &quot; &quot;);
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        SinglyLinkedList list = new SinglyLinkedList();
        int[] nums = {1, 2, 3, 4, 5};
        list.initWithTail(nums);
        list.printList();
        System.out.println(&quot;链表的长度为：&quot; + list.size);
        list.insert(6, 0);
        list.printList();
        System.out.println(&quot;链表的长度为：&quot; + list.size);
        list.delete(5);
        list.printList();
        System.out.println(&quot;链表的长度为：&quot; + list.size);
        list.reverse();
        list.printList();
    }
}
```


链表判断是否有环



使用两个slow, fast指针从头开始扫描链表。指针slow每次走1步，指针fast每次走2步。如果存在环，则指针slow、fast会相遇；如果不存在环，指针fast遇到NULL退出。

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27```
/**
     * 判断单链表是否有环路
     * 算法思想：
     * 设定两个快慢指针slow和fast
     * 其中slow每次向前一步，fast每次向前两步
     * 那么，如果链表存在环，则slow和fast相遇，相当于fast已经超越slow一圈
     * 若链表没有环，则fast最先到达链表末尾
     *
     * @param head
     * @return
     */
    public boolean hasCircle(Node head) {
        if (head == null)
            return false;
        Node slow = head;
        Node fast = head;
        while (fast.next != null &amp;amp;&amp;amp; fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast)
                return true;
        }
        return false;
    }
```


链表环的长度



在环上相遇后，记录第一次相遇点为Pos，之后指针slow继续每次走1步，fast每次走2步。在下次相遇的时候fast比slow正好又多走了一圈，也就是多走的距离等于环长。

设从第一次相遇到第二次相遇，设slow走了len步，则fast走了2*len步，相遇时多走了一圈：环长=2*len-len。

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38```
/**
     * 环的长度
     *
     * @param head
     * @return
     */
    public int circleLen(Node head) {
        if (!hasCircle(head))
            return 0;
        Node slow = head;
        Node fast = head;
        Node pos = null;
        //一定有环
        while (true) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                pos = slow;
                break;
            }
        }
        int sLen = 0;
        int fLen = 0;
        slow = pos;
        fast = pos;
        while (true) {
            slow = slow.next;
            fast = fast.next.next;
            sLen += 1;
            fLen += 2;
            if (slow == fast) {
                break;
            }
        }
        return fLen - sLen;
    }
```


链表环连接点的位置



在环上相遇后，记录第一次相遇点为pos，连接点为intersection point，假设头结点到连接点的长度为len，连接点到第一次相遇点的长度为x，环长为R。

第一次相遇时，slow走的长度 S = len + x;

第一次相遇时，fast走的长度 2S = len + n*R + x;

所以可以知道，len + x = n*R;　　len = n*R - x;



1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30```
/**
     * 求环连接点的位置
     *
     * @param head
     * @return
     */
    public Node intersectionPoint(Node head) {
        if (!hasCircle(head))
            return null;
        Node slow = head;
        Node fast = head;
        Node pos = null;
        //一定有环
        while (true) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                pos = slow;
                break;
            }
        }
        Node pHead = head;
        while (pHead != pos) {
            pHead = pHead.next;
            pos = pos.next;
        }
        return pHead;
    }
```


双向链表

双向链表：由各个内存结构通过指针 next 和指针 prev 链接在一起组成，每一个内存结构都存在前驱内存结构和后继内存结构【链头没有前驱，链尾没有后继】，内存结构由数据域、prev 指针域和 next 指针域组成。

文字解析：


  data 数据 + next 指针 + prev 指针，组成一个双向链表的内存结构；
  第一个内存结构称为链头，最后一个内存结构称为链尾；
  链头的 prev 指针设置为null， 链尾的 next 指针设置为null；
  prev 指向的内存结构称为前驱， next 指向的内存结构称为后继；
  双向链表的遍历是双向的，即如果把从链头的 next 一直到链尾的遍历方向定义为正向，那么从链尾的 prev 一直到链头的遍历方向就是反向；


双链表图示：



示例代码如下：

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80```
public class DoublyLinkedList {
    private Node nil = new Node(0);
    private int size = 0;
    private Node head;

    public static class Node {
        int data;  //关键字
        Node prev; //头指针，指向前驱元素
        Node next; //尾指针，指向后继元素

        public Node(int data) {
            this.data = data;
        }
    }

    public DoublyLinkedList() {
        //初始化一个空的链表，由一个哨兵组成！
        nil.next = null;
        nil.prev = null;
    }

    /**
     * 从链表的头部插入
     *
     * @param data
     */
    public void insert(int data) {
        Node node = new Node(data);
        if (head == null) {
            head = node;
            head.prev = nil;
            nil.next = head;
            size += 1;
        } else {
            node.next = nil.next;
            nil.next.prev = node;
            nil.next = node;
            node.prev = nil;
            size += 1;
            head = nil.next;
        }
    }

    /**
     * 从链表的头部删除
     */
    public void delete() {
        if (head == null)
            return;
        head.prev.next = head.next;
        head.next.prev = head.prev;
        size -= 1;
        head = nil.next;
    }

    /**
     * 从头到尾遍历链表
     */
    public void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + &quot; &quot;);
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 4, 5};
        DoublyLinkedList linkedList = new DoublyLinkedList();
        for (int i : nums) {
            linkedList.insert(i);
        }
        linkedList.printList();
        linkedList.delete();
        linkedList.printList();
    }
}
```


循环链表

单向循环链表：由各个内存结构通过一个指针 next 链接在一起组成，每一个内存结构都存在后继内存结构，内存结构由数据域和 next 指针域组成。

双向循环链表：由各个内存结构通过指针 next 和指针 prev 链接在一起组成，每一个内存结构都存在前驱内存结构和后继内存结构，内存结构由数据域、prev 指针域和 next 指针域组成。

文字解析：


  循环链表分为单向、双向两种；
  单向的实现就是在单链表的基础上，把链尾的 next 指针直接指向链头，形成一个闭环；
  双向的实现就是在双向链表的基础上，把链尾的 next 指针指向链头，再把链头的 prev 指针指向链尾，形成一个闭环；
  循环链表没有链头和链尾的说法，因为是闭环的，所以每一个内存结构都可以充当链头和链尾；


单向循环链表图示：



双向循环链表图示：



</content>
      <categories>
        
          <category> 数据结构 </category>
        
      </categories>
      <tags>
        
          <tag> 链表 </tag>
        
          <tag> JAVA </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title>jekyll使用整理</title>
      <url>/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/2018/10/22/jekyll%E4%BD%BF%E7%94%A8%E6%95%B4%E7%90%86/</url>
      <content type="text">本文只是一个基础的Jekyll搭建GitHub Pages博客的总结，详细内容需要跳转参考链接

参考链接

  jekyll指南
  本站主题NexT使用指南


Jekyll基础内容
安装（Mac OS）
确保已安装Ruby 2.1.0或更高版本

ruby --version



安装Bundler

gem install bundler



下载NexT主题

git clone https://github.com/Simpleyyt/jekyll-theme-next.git
//当前主题所在的文件夹
cd jekyll-theme-next



安装依赖

bundle install



运行Jekyll

bundle exec jekyll server



此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行。



目录结构
Jekyll 的核心其实是一个文本转换引擎。它的概念其实就是：你用你最喜欢的标记语言来写文章，可以是 Markdown, 也可以是 Textile, 或者就是简单的 HTML, 然后 Jekyll 就会帮你套入一个或一系列的布局中。在整个过程中你可以设置 URL 路径，你的文本在布局中的显示样式等等。这些都可以通过纯文本编辑来实现，最终生成的静态页面就是你的成品了。

一个基本的 Jekyll 网站的目录结构一般是像这样的：

.
├── _config.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.textile
|   └── on-simplicity-in-technology.markdown
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile
|   └── 2009-04-26-barcamp-boston-4-roundup.textile
├── _site
├── .jekyll-metadata
└── index.html




  
    
      文件/目录
      描述
    
  
  
    
      _config.yml
      保存配置数据。很多配置选项都可以直接在命令行中进行设置，但是如果你把那些配置写在这儿，你就不用非要去记住那些命令了。
    
    
      _drafts
      drafts（草稿）是未发布的文章。这些文件的格式中都没有 title.MARKUP 数据。
    
    
      _includes
      你可以加载这些包含部分到你的布局或者文章中以方便重用。
    
    
      _layouts
      layouts（布局）是包裹在文章外部的模板。布局可以在 YAML 头信息中根据不同文章进行选择。 这将在下一个部分进行介绍。标签   可以将content插入页面中。
    
    
      _posts
      这里放的就是你的文章了。文件格式很重要，必须要符合: YEAR-MONTH-DAY-title.MARKUP。 永久链接 可以在文章中自己定制，但是数据和标记语言都是根据文件名来确定的。
    
    
      _data
      格式化好的网站数据应放在这里。jekyll 的引擎会自动加载在该目录下所有的 yaml 文件（后缀是 .yml, .yaml, .json 或者  .csv ）。这些文件可以经由 ｀site.data｀ 访问。如果有一个 members.yml 文件在该目录下，你就可以通过 site.data.members 获取该文件的内容。
    
    
      _site
      一旦 Jekyll 完成转换，就会将生成的页面放在这里（默认）。最好将这个目录放进你的 .gitignore 文件中。
    
    
      .jekyll-metadata
      该文件帮助 Jekyll 跟踪哪些文件从上次建立站点开始到现在没有被修改，哪些文件需要在下一次站点建立时重新生成。该文件不会被包含在生成的站点中。将它加入到你的 .gitignore 文件可能是一个好注意。
    
    
      index.html and other HTML,Markdown,Textile files
      如果这些文件中包含 YAML 头信息 部分，Jekyll 就会自动将它们进行转换。当然，其他的如 .html, .markdown, .md, 或者 .textile 等在你的站点根目录下或者不是以上提到的目录中的文件也会被转换。
    
    
      Other Files/Folders
      其他一些未被提及的目录和文件如  css 还有 images 文件夹，  favicon.ico 等文件都将被完全拷贝到生成的 site 中。
    
  


博客内容
头信息
正是头信息开始让 Jekyll 变的很酷。任何只要包含 YAML 头信息的文件在 Jekyll 中都能被当做一个特殊的文件来处理。头信息必须在文件的开始部分，并且需要按照 YAML 的格式写在两行三虚线之间。下面是一个基本的例子：

---
title: jekyll使用整理
description: Jekyll 是一个简单的博客形态的静态站点生产机器。它有一个模版目录，其中包含原始文本格式的文档，通过一个转换器（如 Markdown）和我们的 Liquid 渲染器转化成一个完整的可发布的静态网站，你可以发布在任何你喜爱的服务器上。Jekyll 也可以运行在 GitHub Page 上，也就是说，你可以使用 GitHub 的服务来搭建你的项目页面、博客或者网站，而且是完全免费的。
categories:
 - master
tags:
 - jekyll
 - NexT

---



撰写博客
文章文件夹

在目录结构介绍中说明过，所有的文章都在 _posts 文件夹中。这些文件可以用 Markdown 编写，也可以用 Textile 格式编写。只要文件中有 YAML 头信息，它们就会从源格式转化成 HTML 页面，从而成为你的静态网站的一部分。

创建文章的文件

发表一篇新文章，你所需要做的就是在 _posts 文件夹中创建一个新的文件。文件名的命名非常重要。Jekyll 要求一篇文章的文件名遵循下面的格式：

年-月-日-标题.MARKUP



引用图片和其他资源

由于 Jekyll 的灵活性，有很多方式可以解决这个问题。一种常用做法是在工程的根目录下创建一个文件夹，命名为　assets 或者 downloads，将图片文件，下载文件或者其它的资源放到这个文件夹下。然后在任何一篇文章中，它们都可以用站点的根目录来进行引用。这和你站点的域名/二级域名和目录的设置相关，下面有一些例子（Markdown 格式）来演示怎样利用 site.url 变量来解决这个问题。

在文章中引用一个图片

… 从下面的截图可以看到：
![有帮助的截图](http://localhost:4000/assets/screenshot.jpg)



链接一个读者可下载的 PDF 文件：

… 你可以直接 [下载 PDF](http://localhost:4000/assets/mydoc.pdf).



NexT主题（在 Jekyll 中的配置文件是 _config.yml）
主题设定
选择Scheme

Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：


  Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白
  Mist - Muse 的紧凑版本，整洁有序的单栏外观
  Pisces - 双栏 Scheme，小家碧玉似的清新


Scheme 的切换通过更改 _config.yml，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。

#scheme: Muse
#scheme: Mist
scheme: Pisces



设置语言

编辑 主题配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：

language: zh-Hans



设置菜单

菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 Font Awesome 提供的图标

编辑_config.yml，修改以下内容：


  
    设定菜单内容，对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。

     menu:
   home: /
   archives: /archives
   #about: /about
   #categories: /categories
   tags: /tags
   #commonweal: /404.html

    
  
  
    设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Jekyll 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 _data/languages/{language}.yml （{language} 为你所使用的语言）。

    以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 _data/languages/zh-Hans.yml，在 menu 字段下添加一项：

     menu:
   home: 首页
   archives: 归档
   categories: 分类
   tags: 标签
   about: 关于
   search: 搜索
   commonweal: 公益404
   something: 有料

    
  
  
    设定菜单项的图标，对应的字段是 menu_icons。 此设定格式是 item name: icon name，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的 名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。

     menu_icons:
   enable: true
   # Icon Mapping.
   home: home
   about: user
   categories: th
   tags: tags
   archives: archive
   commonweal: heartbeat

    
  


</content>
      <categories>
        
          <category> 环境配置 </category>
        
      </categories>
      <tags>
        
          <tag> Jekyll </tag>
        
          <tag> NexT </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
